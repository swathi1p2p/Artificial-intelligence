import numpy as np
import heapq
class PuzzleState:
    def __init__(self, board, zero_pos, moves=0):
        self.board = board
        self.zero_pos = zero_pos
        self.moves = moves
        self.priority = self.moves + self.heuristic()
    def heuristic(self):
        distance = 0
        for i in range(3):
            for j in range(3):
                value = self.board[i][j]
                if value != 0:
                    target_x = (value - 1) // 3
                    target_y = (value - 1) % 3
                    distance += abs(target_x - i) + abs(target_y - j)
        return distance
    def get_neighbors(self):
        neighbors = []
        x, y = self.zero_pos
        directions = [(1, 0), (-1, 0), (0, 1), (0, -1)]
        for dx, dy in directions:
            new_x, new_y = x + dx, y + dy
            if 0 <= new_x < 3 and 0 <= new_y < 3:
                new_board = [list(row) for row in self.board]
                new_board[x][y], new_board[new_x][new_y] = new_board[new_x][new_y], new_board[x][y]
                neighbors.append(PuzzleState(tuple(map(tuple, new_board)), (new_x, new_y), self.moves + 1))
        return neighbors
    def __lt__(self, other):
        return self.priority < other.priority
def a_star(start_board):
    start_zero_pos = next((i, j) for i in range(3) for j in range(3) if start_board[i][j] == 0)
    start_state = PuzzleState(start_board, start_zero_pos)
    goal_state = ((1, 2, 3), (4, 5, 6), (7, 8, 0))
    visited = set()
    priority_queue = [] 
    heapq.heappush(priority_queue, start_state)
    while priority_queue:
        current_state = heapq.heappop(priority_queue)
        if current_state.board == goal_state:
            return current_state.moves
        visited.add(current_state.board)
        for neighbor in current_state.get_neighbors():
            if neighbor.board not in visited:
                heapq.heappush(priority_queue, neighbor)
    return -1
if __name__ == "__main__":
    initial_board = ((1, 2, 3), (4, 0, 5), (7, 8, 6))
    moves = a_star(initial_board)
    print(f"Minimum moves to solve the puzzle: {moves}")

output
Minimum moves to solve the puzzle: 2
