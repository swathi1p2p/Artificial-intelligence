from collections import deque
def is_goal(state):
    goal_state = [[1, 2, 3], [4, 5, 6], [7, 8, 0]]
    return state == goal_state
def find_empty(state):
    for i in range(3):
        for j in range(3):
            if state[i][j] == 0:
                return i, j
def print_puzzle(state):
    for row in state:
        print(row)
    print("\n")
def is_valid(x, y):
    return 0 <= x < 3 and 0 <= y < 3
def get_neighbors(state):
    neighbors = []
    empty_x, empty_y = find_empty(state)
    directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]
    for dx, dy in directions:
        new_x, new_y = empty_x + dx, empty_y + dy
        if is_valid(new_x, new_y):
            new_state = [row[:] for row in state]
            new_state[empty_x][empty_y], new_state[new_x][new_y] = new_state[new_x][new_y], new_state[empty_x][empty_y]
            neighbors.append(new_state)
    return neighbors
def solve_puzzle(initial_state):
    queue = deque([initial_state])
    visited = set()
    visited.add(tuple(tuple(row) for row in initial_state))
    parent = {tuple(tuple(row) for row in initial_state): None} 
    while queue:
        current_state = queue.popleft()
        print("Current state:")
        print_puzzle(current_state)
        if is_goal(current_state):
            print("Goal reached!")
            return True
        for neighbor in get_neighbors(current_state):
            neighbor_tuple = tuple(tuple(row) for row in neighbor)
            if neighbor_tuple not in visited:
                queue.append(neighbor)
                visited.add(neighbor_tuple)
                parent[neighbor_tuple] = current_state
    return False
if __name__ == "__main__":
    initial_state = [
        [1, 2, 3],
        [4, 0, 6],
        [7, 5, 8]
    ]
    print("Initial state:")
    print_puzzle(initial_state)
    if solve_puzzle(initial_state):
        print("Puzzle solved!")
    else:
        print("No solution found.")
output Initial state:
[1, 2, 3]
[4, 0, 6]
[7, 5, 8]


Current state:
[1, 2, 3]
[4, 0, 6]
[7, 5, 8]


Current state:
[1, 0, 3]
[4, 2, 6]
[7, 5, 8]


Current state:
[1, 2, 3]
[4, 5, 6]
[7, 0, 8]


Current state:
[1, 2, 3]
[0, 4, 6]
[7, 5, 8]


Current state:
[1, 2, 3]
[4, 6, 0]
[7, 5, 8]


Current state:
[0, 1, 3]
[4, 2, 6]
[7, 5, 8]


Current state:
[1, 3, 0]
[4, 2, 6]
[7, 5, 8]


Current state:
[1, 2, 3]
[4, 5, 6]
[0, 7, 8]


Current state:
[1, 2, 3]
[4, 5, 6]
[7, 8, 0]


Goal reached!
Puzzle solved!
